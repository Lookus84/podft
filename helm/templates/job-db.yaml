{{- range $image, $imageData := .Values.db }}
{{- include "job.db" (list $ $image $imageData) }}
{{- end }}

{{- define "job.db" -}}
{{- $params := (index . 0) }}
{{- $name := (index . 1) }}
{{- $sourceDbImg := (index . 2) }}
---
kind: Job
apiVersion: batch/v1
metadata:
  name: {{ include "dbm.fullName" (list $params $sourceDbImg) }}
  labels:
    app: {{ include "dbm.name" (list $params $sourceDbImg) }}
    wave: {{ $sourceDbImg.startWave | quote }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade,pre-rollback"
    "helm.sh/hook-weight": "2"
    "helm.sh/resource-policy": "keep"
spec:
  parallelism: 1
  backoffLimit: 0
  template:
    metadata:
      {{- include "annotations.add" (list $params "job" "") | indent 6 }}
      labels:
        job-name: {{ include "dbm.fullName" (list $params $sourceDbImg) }}
        name: {{ include "dbm.fullName" (list $params $sourceDbImg) }}
    spec:
      serviceAccountName: {{ include "app.serviceAccountName" $params }}
      volumes:
        {{- include "vol.def" (list $params "job") | indent 8}}

      {{- if $params.Values.initContainers }}
      initContainers:
      {{-   range $params.Values.initContainers }}
      {{-     if contains "devopsutils" .image.repository }}
      {{-      include "init.container.body" (list $params . "job-init-cont") | indent 8 }} 
      {{-     end }}
      {{-   end }}
      {{- end }}
      containers:
        - name: {{ include "dbm.fullName" (list $params $sourceDbImg) }}
          securityContext:
            {{- toYaml $params.Values.securityContext | nindent 12 }}
          image: {{ include "dbm.image" (list $params $sourceDbImg) | quote }}
          command:
            - /bin/sh
          args:
            - '-c'
            - '
              {{- if $params.Values.vault.enabled }}
              {{ $params.Values.vault.cmdToInject }}
              {{- end }}
              if [ -f "/share/scripts/verchecker" ]; then mv /share/scripts/verchecker /share/verchecker; chmod 777 /share/verchecker; fi;
              if [ -f /share/scripts/unlockDataBaseChangeLog.sh ]; then sh /share/scripts/unlockDataBaseChangeLog.sh {{ include "dbm.moduleName" (list $params $sourceDbImg) }}; fi; sh /share/scripts/run-application.sh {{ include "dbm.moduleName" (list $params $sourceDbImg) }}; if [ -f /share/logs/dbmanager/{{ include "dbm.moduleName" (list $params $sourceDbImg) }}-database-unready.appflag ]; then exit 1; fi; '
          {{- with $params.Values.environmentsFrom }}
          envFrom:
            {{- include "envFrom.add" (list $params.Values (include "dbm.fullModuleName" (list $params $sourceDbImg)) "job-main-cont") | indent 12 }}
          {{- end }}
          {{- with $params.Values.environments }}
          env:
            {{- include "env.add" (list $params.Values "job-main-cont") | indent 12 }}
          {{- end }}
      {{- with $params.Values.resources.db }}
          resources:
            {{- toYaml $params.Values.resources.db | nindent 12 }}
      {{- end }}
          volumeMounts:
            {{- include "vol.mount" (list $params "job-main-cont") | indent 12}}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: {{ include "dbm.pullPolicy" (list $params $sourceDbImg) }}
      restartPolicy: Never
      securityContext: 
      {{- toYaml $params.Values.podSecurityContext | nindent 8 }}
      {{- with $params.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      hostname: {{ include "dbm.name" (list $params $sourceDbImg) }}
      schedulerName: default-scheduler
      {{- with $params.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $params.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $params.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}